}
# count_matrix<-matrix(data = 0,nrow = 2,ncol = length(terms_all_domains))
# library(stringr)
#for(k in 1:length(terms_all_domains))
{
#  count_matrix[1][k]=str_count(X_1[1], terms_all_domains[k])
}
#xmldatatable <- setDT(xmlToDataFrame("positive.xml"))
#w<-matrix(data = 0,ncol = 1  ,nrow = D)
#W<-matrix(data=0,ncol = M,nrow =D )
#domain_dt<-paste(domains,"lex_dt",sep = "_")
#N<-c();
#for( i in 1:length(domains))
##{
# N<-c(N,nrow(get(domain_dt[i])))
#}
#N<-matrix(N,nrow = length(N))
#maxlen<-max(N)
##X<-matrix("",nrow = maxlen,ncol = M)
#X<-matrix()
#for( i in 1:length(domains))
#{
# cbind(X,c(get(domain_dt[i])[,lexicon_name],rep(NA,maxlen-N[i])))
#}
#X1<-matrix(data = 0,nrow = )
}
library(parallel)
Job1 = mcparallel(computeCost())
JobResult1 = mccollect(Job1)
require(twitteR)
require(stringr)
require(RCurl)
ck<-'yRudGaS3f1ySiyrIlkYoBhtPM'
cs<-'Ne694V5pv5q5j6x0e8SlSLnJVfVZ6NNTYWBFpnCASujSGiOUDa'
at<-'761938864697122817-xWZSEcLJUAX70PMrpfnkbiSTW2IL4MH'
as<-'XizvBqirw02MoFCzdiWAXEa8s3V2dbHEj3OXT797FTOye'
setup_twitter_oauth(ck,cs,at,as)
tweets<-searchTwitter("iphone",n=1000,lang="en")
tweets<-strip_retweets(tweets)
tweets.df <- twListToDF(tweets)
tweets.df$text=gsub('http.*\\s*', '', tweets.df$text)
tweets.df$text = gsub("@\\w+", "", tweets.df$text)
tweets.df$text = gsub("(RT|via)((?:\\b\\W*@\\w+)+)", "", tweets.df$text)
tweets.df$text = gsub("[[:punct:]]", "", tweets.df$text)
tweets.df$text <- str_replace_all(tweets.df$text,"\n","")
tweets.df$text=str_replace_all(tweets.df$text,"&amp;"," and ")
tweets.df$text=gsub("[^\x20-\x7E]", "", tweets.df$text)
tweets=unique(tweets.df$text)
require(Matrix)
predictionData <- tweets
predMatrix <- create_matrix(predictionData, originalMatrix=dtMatrix)
predSize = length(predictionData);
predictionContainer <- create_container(predMatrix, labels=rep(0,predSize), testSize=1:predSize, virgin=FALSE)
results <- classify_model(predictionContainer, model)
ab=results[which(results$SVM_PROB>0.80),]
pro_book=length(which(ab$SVM_LABEL==1))
pro_elec=length(which(ab$SVM_LABEL==2))
predMatrix1 <- create_matrix(predictionData, originalMatrix=dtMatrix1)
predSize1 = length(predictionData);
predictionContainer1 <- create_container(predMatrix1, labels=rep(0,predSize1), testSize=1:predSize1, virgin=FALSE)
results <- classify_model(predictionContainer1, model1)
ab=results[which(results$SVM_PROB>0.80),]
pro_kitchen=length(which(ab$SVM_LABEL==1))
pro_dvd=length(which(ab$SVM_LABEL==2))
score=c(pro_book,pro_dvd,pro_elec,pro_kitchen)
detect_domain<-which.max(score)
detect_domain=4
library(rJava)
.jinit()
senti <- J("senti")
new_data <- dfm(as.matrix(tweets), n = 1, removePunct = TRUE, removeNumbers = TRUE)
new_features<-setdiff(colnames(new_data),fet)
test<-match(colnames(new_data),new_features)
test<-test[!is.na(test)]
stripped_new_data<-new_data[,test]
stripped_new_data[apply(stripped_new_data[,-1], 1, function(x) !all(x==0)),]
extra_rows<-matrix(0,nrow = 4,ncol = ncol(stripped_new_data))
extra_rows<-as.dfm(extra_rows)
colnames(extra_rows)<-colnames(stripped_new_data)
train_data<-rbind(stripped_new_data,extra_rows)
train_d<-c(rep.int(detect_domain,times = nrow(stripped_new_data)),c(1,2,3,4))
train_p <- senti$getsenti(.jarray(new_features))
train_y<-rep.int(class,nrow(train_data))
test <- MultiDomain(train_data, train_y, train_d, train_p, alpha, beta, S, lambda1, lambda2, type)
new_w<-unlist(test[[1]])
new_W<-unlist(test[[2]])
#w<-unique(rbind(w,new_w))
#W<-unique(rbind(W,new_W))
trace("create_matrix",edit=T)
fet<-rownames(w)
tokens<-tokenize(paste(tweets.df$text,collapse = " " ))
tokens<-unlist(tokens)
match_tokens<-match(tokens,fet)
match_tokens<-match_tokens[!is.na(match_tokens)]
class=sum(w[match_tokens],na.rm = TRUE)
if (class<0)
class=-1
if (class>0)
class=1
class
require(RTextTools)
require(XML)
elec_neg <- xmlToDataFrame("electronics_neg.xml")
elec_pos <- xmlToDataFrame("electronics_pos.xml")
books_pos <- xmlToDataFrame("books_pos.xml")
books_neg <- xmlToDataFrame("books_neg.xml")
books_neg=cbind(books_neg,"category")
books_neg$"category"=1
books_pos=cbind(books_pos,"category")
books_pos$"category"=1
elec_neg=cbind(elec_neg,"category")
elec_neg$"category"=2
elec_pos=cbind(elec_pos,"category")
elec_pos$"category"=2
books=rbind(books_pos,elec_pos)
elec=rbind(books_neg,elec_neg)
alldata=rbind(books,elec)
#read data 2
dvd_neg <- xmlToDataFrame("dvd_neg.xml")
dvd_pos <- xmlToDataFrame("dvd_pos.xml")
kitchen_pos <- xmlToDataFrame("kitchen_pos.xml")
kitchen_neg <- xmlToDataFrame("kitchen_neg.xml")
kitchen_neg=cbind(kitchen_neg,"category")
kitchen_neg$"category"=1
kitchen_pos=cbind(kitchen_pos,"category")
kitchen_pos$"category"=1
dvd_neg=cbind(dvd_neg,"category")
dvd_neg$"category"=2
dvd_pos=cbind(dvd_pos,"category")
dvd_pos$"category"=2
kitchen=rbind(kitchen_pos,dvd_pos)
dvd=rbind(kitchen_neg,dvd_neg)
alldata1=rbind(kitchen,dvd)
#FOR DATA1
dtMatrix <- create_matrix(alldata$review_text)
container <- create_container(dtMatrix, alldata$category, trainSize=1:4000, virgin=FALSE)
model <- train_model(container, "SVM", kernel="linear", cost=1)
#detect in part2
dtMatrix1 <- create_matrix(alldata1$review_text)
container1 <- create_container(dtMatrix1, alldata1$category, trainSize=1:4000, virgin=FALSE)
model1 <- train_model(container1, "SVM", kernel="linear", cost=1)
require(Matrix)
predictionData <- tweets
predMatrix <- create_matrix(predictionData, originalMatrix=dtMatrix)
predSize = length(predictionData);
predictionContainer <- create_container(predMatrix, labels=rep(0,predSize), testSize=1:predSize, virgin=FALSE)
results <- classify_model(predictionContainer, model)
ab=results[which(results$SVM_PROB>0.80),]
pro_book=length(which(ab$SVM_LABEL==1))
pro_elec=length(which(ab$SVM_LABEL==2))
predMatrix1 <- create_matrix(predictionData, originalMatrix=dtMatrix1)
predSize1 = length(predictionData);
predictionContainer1 <- create_container(predMatrix1, labels=rep(0,predSize1), testSize=1:predSize1, virgin=FALSE)
results <- classify_model(predictionContainer1, model1)
ab=results[which(results$SVM_PROB>0.80),]
pro_kitchen=length(which(ab$SVM_LABEL==1))
pro_dvd=length(which(ab$SVM_LABEL==2))
score=c(pro_book,pro_dvd,pro_elec,pro_kitchen)
detect_domain<-which.max(score)
detect_domain=4
library(rJava)
.jinit()
senti <- J("senti")
new_data <- dfm(as.matrix(tweets), n = 1, removePunct = TRUE, removeNumbers = TRUE)
new_features<-setdiff(colnames(new_data),fet)
test<-match(colnames(new_data),new_features)
test<-test[!is.na(test)]
stripped_new_data<-new_data[,test]
stripped_new_data[apply(stripped_new_data[,-1], 1, function(x) !all(x==0)),]
extra_rows<-matrix(0,nrow = 4,ncol = ncol(stripped_new_data))
extra_rows<-as.dfm(extra_rows)
colnames(extra_rows)<-colnames(stripped_new_data)
train_data<-rbind(stripped_new_data,extra_rows)
train_d<-c(rep.int(detect_domain,times = nrow(stripped_new_data)),c(1,2,3,4))
train_p <- senti$getsenti(.jarray(new_features))
train_y<-rep.int(class,nrow(train_data))
test <- MultiDomain(train_data, train_y, train_d, train_p, alpha, beta, S, lambda1, lambda2, type)
new_w<-unlist(test[[1]])
new_W<-unlist(test[[2]])
w<-(rbind(w,new_w))
W<-(rbind(W,new_W))
trace("create_matrix",edit=T)
trace("create_matrix",edit=T)
require(twitteR)
require(stringr)
require(RCurl)
ck<-'yRudGaS3f1ySiyrIlkYoBhtPM'
cs<-'Ne694V5pv5q5j6x0e8SlSLnJVfVZ6NNTYWBFpnCASujSGiOUDa'
at<-'761938864697122817-xWZSEcLJUAX70PMrpfnkbiSTW2IL4MH'
as<-'XizvBqirw02MoFCzdiWAXEa8s3V2dbHEj3OXT797FTOye'
setup_twitter_oauth(ck,cs,at,as)
tweets<-searchTwitter("iphone",n=1000,lang="en")
tweets<-strip_retweets(tweets)
tweets.df <- twListToDF(tweets)
tweets.df$text=gsub('http.*\\s*', '', tweets.df$text)
tweets.df$text = gsub("@\\w+", "", tweets.df$text)
tweets.df$text = gsub("(RT|via)((?:\\b\\W*@\\w+)+)", "", tweets.df$text)
tweets.df$text = gsub("[[:punct:]]", "", tweets.df$text)
tweets.df$text <- str_replace_all(tweets.df$text,"\n","")
tweets.df$text=str_replace_all(tweets.df$text,"&amp;"," and ")
tweets.df$text=gsub("[^\x20-\x7E]", "", tweets.df$text)
tweets=unique(tweets.df$text)
fet<-rownames(w)
tokens<-tokenize(paste(tweets.df$text,collapse = " " ))
tokens<-unlist(tokens)
match_tokens<-match(tokens,fet)
match_tokens<-match_tokens[!is.na(match_tokens)]
class=sum(w[match_tokens],na.rm = TRUE)
if (class<0)
class=-1
if (class>0)
class=1
require(RTextTools)
require(XML)
elec_neg <- xmlToDataFrame("electronics_neg.xml")
elec_pos <- xmlToDataFrame("electronics_pos.xml")
books_pos <- xmlToDataFrame("books_pos.xml")
books_neg <- xmlToDataFrame("books_neg.xml")
books_neg=cbind(books_neg,"category")
books_neg$"category"=1
books_pos=cbind(books_pos,"category")
books_pos$"category"=1
elec_neg=cbind(elec_neg,"category")
elec_neg$"category"=2
elec_pos=cbind(elec_pos,"category")
elec_pos$"category"=2
books=rbind(books_pos,elec_pos)
elec=rbind(books_neg,elec_neg)
alldata=rbind(books,elec)
#read data 2
dvd_neg <- xmlToDataFrame("dvd_neg.xml")
dvd_pos <- xmlToDataFrame("dvd_pos.xml")
kitchen_pos <- xmlToDataFrame("kitchen_pos.xml")
kitchen_neg <- xmlToDataFrame("kitchen_neg.xml")
kitchen_neg=cbind(kitchen_neg,"category")
kitchen_neg$"category"=1
kitchen_pos=cbind(kitchen_pos,"category")
kitchen_pos$"category"=1
dvd_neg=cbind(dvd_neg,"category")
dvd_neg$"category"=2
dvd_pos=cbind(dvd_pos,"category")
dvd_pos$"category"=2
kitchen=rbind(kitchen_pos,dvd_pos)
dvd=rbind(kitchen_neg,dvd_neg)
alldata1=rbind(kitchen,dvd)
#FOR DATA1
dtMatrix <- create_matrix(alldata$review_text)
container <- create_container(dtMatrix, alldata$category, trainSize=1:4000, virgin=FALSE)
model <- train_model(container, "SVM", kernel="linear", cost=1)
#detect in part2
dtMatrix1 <- create_matrix(alldata1$review_text)
container1 <- create_container(dtMatrix1, alldata1$category, trainSize=1:4000, virgin=FALSE)
model1 <- train_model(container1, "SVM", kernel="linear", cost=1)
require(Matrix)
predictionData <- tweets
predMatrix <- create_matrix(predictionData, originalMatrix=dtMatrix)
predSize = length(predictionData);
predictionContainer <- create_container(predMatrix, labels=rep(0,predSize), testSize=1:predSize, virgin=FALSE)
results <- classify_model(predictionContainer, model)
ab=results[which(results$SVM_PROB>0.80),]
pro_book=length(which(ab$SVM_LABEL==1))
pro_elec=length(which(ab$SVM_LABEL==2))
predMatrix1 <- create_matrix(predictionData, originalMatrix=dtMatrix1)
predSize1 = length(predictionData);
predictionContainer1 <- create_container(predMatrix1, labels=rep(0,predSize1), testSize=1:predSize1, virgin=FALSE)
results <- classify_model(predictionContainer1, model1)
ab=results[which(results$SVM_PROB>0.80),]
pro_kitchen=length(which(ab$SVM_LABEL==1))
pro_dvd=length(which(ab$SVM_LABEL==2))
score=c(pro_book,pro_dvd,pro_elec,pro_kitchen)
detect_domain<-which.max(score)
detect_domain=4
library(rJava)
.jinit()
senti <- J("senti")
new_data <- dfm(as.matrix(tweets), n = 1, removePunct = TRUE, removeNumbers = TRUE)
new_features<-setdiff(colnames(new_data),fet)
test<-match(colnames(new_data),new_features)
test<-test[!is.na(test)]
stripped_new_data<-new_data[,test]
stripped_new_data[apply(stripped_new_data[,-1], 1, function(x) !all(x==0)),]
extra_rows<-matrix(0,nrow = 4,ncol = ncol(stripped_new_data))
extra_rows<-as.dfm(extra_rows)
colnames(extra_rows)<-colnames(stripped_new_data)
train_data<-rbind(stripped_new_data,extra_rows)
train_d<-c(rep.int(detect_domain,times = nrow(stripped_new_data)),c(1,2,3,4))
train_p <- senti$getsenti(.jarray(new_features))
train_y<-rep.int(class,nrow(train_data))
test <- MultiDomain(train_data, train_y, train_d, train_p, alpha, beta, S, lambda1, lambda2, type)
new_w<-unlist(test[[1]])
new_W<-unlist(test[[2]])
w<-(rbind(w,new_w))
W<-(rbind(W,new_W))
tail(w)
length(w)
require(twitteR)
require(stringr)
require(RCurl)
ck<-'yRudGaS3f1ySiyrIlkYoBhtPM'
cs<-'Ne694V5pv5q5j6x0e8SlSLnJVfVZ6NNTYWBFpnCASujSGiOUDa'
at<-'761938864697122817-xWZSEcLJUAX70PMrpfnkbiSTW2IL4MH'
as<-'XizvBqirw02MoFCzdiWAXEa8s3V2dbHEj3OXT797FTOye'
setup_twitter_oauth(ck,cs,at,as)
tweets<-searchTwitter("lenovo",n=1000,lang="en")
tweets<-strip_retweets(tweets)
tweets.df <- twListToDF(tweets)
tweets.df$text=gsub('http.*\\s*', '', tweets.df$text)
tweets.df$text = gsub("@\\w+", "", tweets.df$text)
tweets.df$text = gsub("(RT|via)((?:\\b\\W*@\\w+)+)", "", tweets.df$text)
tweets.df$text = gsub("[[:punct:]]", "", tweets.df$text)
tweets.df$text <- str_replace_all(tweets.df$text,"\n","")
tweets.df$text=str_replace_all(tweets.df$text,"&amp;"," and ")
tweets.df$text=gsub("[^\x20-\x7E]", "", tweets.df$text)
tweets=unique(tweets.df$text)
fet<-rownames(w)
tokens<-tokenize(paste(tweets.df$text,collapse = " " ))
tokens<-unlist(tokens)
match_tokens<-match(tokens,fet)
match_tokens<-match_tokens[!is.na(match_tokens)]
class=sum(w[match_tokens],na.rm = TRUE)
if (class<0)
class=-1
if (class>0)
class=1
require(Matrix)
predictionData <- tweets
predMatrix <- create_matrix(predictionData, originalMatrix=dtMatrix)
predSize = length(predictionData);
predictionContainer <- create_container(predMatrix, labels=rep(0,predSize), testSize=1:predSize, virgin=FALSE)
results <- classify_model(predictionContainer, model)
ab=results[which(results$SVM_PROB>0.80),]
pro_book=length(which(ab$SVM_LABEL==1))
pro_elec=length(which(ab$SVM_LABEL==2))
predMatrix1 <- create_matrix(predictionData, originalMatrix=dtMatrix1)
predSize1 = length(predictionData);
predictionContainer1 <- create_container(predMatrix1, labels=rep(0,predSize1), testSize=1:predSize1, virgin=FALSE)
results <- classify_model(predictionContainer1, model1)
ab=results[which(results$SVM_PROB>0.80),]
pro_kitchen=length(which(ab$SVM_LABEL==1))
pro_dvd=length(which(ab$SVM_LABEL==2))
score=c(pro_book,pro_dvd,pro_elec,pro_kitchen)
detect_domain<-which.max(score)
detect_domain=4
library(rJava)
.jinit()
senti <- J("senti")
new_data <- dfm(as.matrix(tweets), n = 1, removePunct = TRUE, removeNumbers = TRUE)
new_features<-setdiff(colnames(new_data),fet)
test<-match(colnames(new_data),new_features)
test<-test[!is.na(test)]
stripped_new_data<-new_data[,test]
stripped_new_data[apply(stripped_new_data[,-1], 1, function(x) !all(x==0)),]
extra_rows<-matrix(0,nrow = 4,ncol = ncol(stripped_new_data))
extra_rows<-as.dfm(extra_rows)
colnames(extra_rows)<-colnames(stripped_new_data)
train_data<-rbind(stripped_new_data,extra_rows)
train_d<-c(rep.int(detect_domain,times = nrow(stripped_new_data)),c(1,2,3,4))
train_p <- senti$getsenti(.jarray(new_features))
train_y<-rep.int(class,nrow(train_data))
test <- MultiDomain(train_data, train_y, train_d, train_p, alpha, beta, S, lambda1, lambda2, type)
new_w<-unlist(test[[1]])
new_W<-unlist(test[[2]])
w<-(rbind(w,new_w))
W<-(rbind(W,new_W))
w
tail(w)
length(w)
require(twitteR)
require(stringr)
require(RCurl)
ck<-'yRudGaS3f1ySiyrIlkYoBhtPM'
cs<-'Ne694V5pv5q5j6x0e8SlSLnJVfVZ6NNTYWBFpnCASujSGiOUDa'
at<-'761938864697122817-xWZSEcLJUAX70PMrpfnkbiSTW2IL4MH'
as<-'XizvBqirw02MoFCzdiWAXEa8s3V2dbHEj3OXT797FTOye'
setup_twitter_oauth(ck,cs,at,as)
tweets<-searchTwitter("nvidia",n=1000,lang="en")
tweets<-strip_retweets(tweets)
tweets.df <- twListToDF(tweets)
tweets.df$text=gsub('http.*\\s*', '', tweets.df$text)
tweets.df$text = gsub("@\\w+", "", tweets.df$text)
tweets.df$text = gsub("(RT|via)((?:\\b\\W*@\\w+)+)", "", tweets.df$text)
tweets.df$text = gsub("[[:punct:]]", "", tweets.df$text)
tweets.df$text <- str_replace_all(tweets.df$text,"\n","")
tweets.df$text=str_replace_all(tweets.df$text,"&amp;"," and ")
tweets.df$text=gsub("[^\x20-\x7E]", "", tweets.df$text)
tweets=unique(tweets.df$text)
fet<-rownames(w)
tokens<-tokenize(paste(tweets.df$text,collapse = " " ))
tokens<-unlist(tokens)
match_tokens<-match(tokens,fet)
match_tokens<-match_tokens[!is.na(match_tokens)]
class=sum(w[match_tokens],na.rm = TRUE)
if (class<0)
class=-1
if (class>0)
class=1
require(Matrix)
predictionData <- tweets
predMatrix <- create_matrix(predictionData, originalMatrix=dtMatrix)
predSize = length(predictionData);
predictionContainer <- create_container(predMatrix, labels=rep(0,predSize), testSize=1:predSize, virgin=FALSE)
results <- classify_model(predictionContainer, model)
ab=results[which(results$SVM_PROB>0.80),]
pro_book=length(which(ab$SVM_LABEL==1))
pro_elec=length(which(ab$SVM_LABEL==2))
predMatrix1 <- create_matrix(predictionData, originalMatrix=dtMatrix1)
predSize1 = length(predictionData);
predictionContainer1 <- create_container(predMatrix1, labels=rep(0,predSize1), testSize=1:predSize1, virgin=FALSE)
results <- classify_model(predictionContainer1, model1)
ab=results[which(results$SVM_PROB>0.80),]
pro_kitchen=length(which(ab$SVM_LABEL==1))
pro_dvd=length(which(ab$SVM_LABEL==2))
score=c(pro_book,pro_dvd,pro_elec,pro_kitchen)
detect_domain<-which.max(score)
detect_domain=4
library(rJava)
.jinit()
senti <- J("senti")
new_data <- dfm(as.matrix(tweets), n = 1, removePunct = TRUE, removeNumbers = TRUE)
new_features<-setdiff(colnames(new_data),fet)
test<-match(colnames(new_data),new_features)
test<-test[!is.na(test)]
stripped_new_data<-new_data[,test]
stripped_new_data[apply(stripped_new_data[,-1], 1, function(x) !all(x==0)),]
extra_rows<-matrix(0,nrow = 4,ncol = ncol(stripped_new_data))
extra_rows<-as.dfm(extra_rows)
colnames(extra_rows)<-colnames(stripped_new_data)
train_data<-rbind(stripped_new_data,extra_rows)
train_d<-c(rep.int(detect_domain,times = nrow(stripped_new_data)),c(1,2,3,4))
train_p <- senti$getsenti(.jarray(new_features))
train_y<-rep.int(class,nrow(train_data))
test <- MultiDomain(train_data, train_y, train_d, train_p, alpha, beta, S, lambda1, lambda2, type)
new_w<-unlist(test[[1]])
new_W<-unlist(test[[2]])
w<-(rbind(w,new_w))
W<-(rbind(W,new_W))
length(w)
tail(w)
tail(W)
head(w)
require(twitteR)
require(stringr)
require(RCurl)
ck<-'yRudGaS3f1ySiyrIlkYoBhtPM'
cs<-'Ne694V5pv5q5j6x0e8SlSLnJVfVZ6NNTYWBFpnCASujSGiOUDa'
at<-'761938864697122817-xWZSEcLJUAX70PMrpfnkbiSTW2IL4MH'
as<-'XizvBqirw02MoFCzdiWAXEa8s3V2dbHEj3OXT797FTOye'
setup_twitter_oauth(ck,cs,at,as)
tweets<-searchTwitter("motog5",n=1000,lang="en")
tweets<-strip_retweets(tweets)
tweets.df <- twListToDF(tweets)
tweets.df$text=gsub('http.*\\s*', '', tweets.df$text)
tweets.df$text = gsub("@\\w+", "", tweets.df$text)
tweets.df$text = gsub("(RT|via)((?:\\b\\W*@\\w+)+)", "", tweets.df$text)
tweets.df$text = gsub("[[:punct:]]", "", tweets.df$text)
tweets.df$text <- str_replace_all(tweets.df$text,"\n","")
tweets.df$text=str_replace_all(tweets.df$text,"&amp;"," and ")
tweets.df$text=gsub("[^\x20-\x7E]", "", tweets.df$text)
tweets=unique(tweets.df$text)
fet<-rownames(w)
tokens<-tokenize(paste(tweets.df$text,collapse = " " ))
tokens<-unlist(tokens)
match_tokens<-match(tokens,fet)
match_tokens<-match_tokens[!is.na(match_tokens)]
class=sum(w[match_tokens],na.rm = TRUE)
if (class<0)
class=-1
if (class>0)
class=1
time<-proc.time()
require(Matrix)
predictionData <- tweets
predMatrix <- create_matrix(predictionData, originalMatrix=dtMatrix)
predSize = length(predictionData);
predictionContainer <- create_container(predMatrix, labels=rep(0,predSize), testSize=1:predSize, virgin=FALSE)
results <- classify_model(predictionContainer, model)
ab=results[which(results$SVM_PROB>0.80),]
pro_book=length(which(ab$SVM_LABEL==1))
pro_elec=length(which(ab$SVM_LABEL==2))
predMatrix1 <- create_matrix(predictionData, originalMatrix=dtMatrix1)
predSize1 = length(predictionData);
predictionContainer1 <- create_container(predMatrix1, labels=rep(0,predSize1), testSize=1:predSize1, virgin=FALSE)
results <- classify_model(predictionContainer1, model1)
ab=results[which(results$SVM_PROB>0.80),]
pro_kitchen=length(which(ab$SVM_LABEL==1))
pro_dvd=length(which(ab$SVM_LABEL==2))
score=c(pro_book,pro_dvd,pro_kitchen,pro_elec)
detect_domain<-which.max(score)
#detect_domain=4
print(detect_domain)
library(rJava)
.jinit()
senti <- J("senti")
new_data <- dfm(as.matrix(tweets), n = 1, removePunct = TRUE, removeNumbers = TRUE)
new_features<-setdiff(colnames(new_data),fet)
test<-match(colnames(new_data),new_features)
test<-test[!is.na(test)]
stripped_new_data<-new_data[,test]
stripped_new_data[apply(stripped_new_data[,-1], 1, function(x) !all(x==0)),]
extra_rows<-matrix(0,nrow = 4,ncol = ncol(stripped_new_data))
extra_rows<-as.dfm(extra_rows)
colnames(extra_rows)<-colnames(stripped_new_data)
train_data<-rbind(stripped_new_data,extra_rows)
train_d<-c(rep.int(detect_domain,times = nrow(stripped_new_data)),c(1,2,3,4))
train_p <- senti$getsenti(.jarray(new_features))
train_y<-rep.int(class,nrow(train_data))
test <- MultiDomain(train_data, train_y, train_d, train_p, alpha, beta, S, lambda1, lambda2, type)
new_w<-unlist(test[[1]])
new_W<-unlist(test[[2]])
w<-(rbind(w,new_w))
W<-(rbind(W,new_W))
print(proc.time()-time)
