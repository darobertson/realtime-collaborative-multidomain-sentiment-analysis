"," if (attr(weighting, "acronym") == "tf-idf")
","    weight <- 1e-09
"," amat <- matrix(weight, nrow = nrow(matrix), ncol = length(terms))
"," colnames(amat) <- terms
"," rownames(amat) <- rownames(matrix)
"," fixed <- as.DocumentTermMatrix(cbind(matrix[, which(colnames(matrix) %in%
","      colnames(originalMatrix))], amat), weighting = weighting)
"," matrix <- fixed
","}", collapse="\n")
paste("heyy")
paste("heyy","yoo")
paste("if (!is.null(originalMatrix)) {","    terms <- colnames(originalMatrix[, which(!colnames(originalMatrix) %in% colnames(matrix))])   "," weight <- 0   "," if (attr(weighting, "acronym") == "tf-idf")     ","    weight <- 1e-09   "," amat <- matrix(weight, nrow = nrow(matrix), ncol = length(terms))   "," colnames(amat) <- terms   "," rownames(amat) <- rownames(matrix)   "," fixed <- as.DocumentTermMatrix(cbind(matrix[, which(colnames(matrix) %in%   ","      colnames(originalMatrix))], amat), weighting = weighting)   "," matrix <- fixed","}", collapse="\n")
c1<-"if (!is.null(originalMatrix)) { "
c2<- "   terms <- colnames(originalMatrix[, which(!colnames(originalMatrix) %in%   "
c3<-  "      colnames(matrix))])  "
c4<-  "  weight <- 0  "
c5<-  "  if (attr(weighting, "acronym") == "tf-idf")   "
c6<-  "      weight <- 1e-09  "
c7<-  "  amat <- matrix(weight, nrow = nrow(matrix), ncol = length(terms))  "
c8<-  "  colnames(amat) <- terms "
c9<- "   rownames(amat) <- rownames(matrix) "
c10<- "   fixed <- as.DocumentTermMatrix(cbind(matrix[, which(colnames(matrix) %in%  "
c11<- "       colnames(originalMatrix))], amat), weighting = weighting) "
c12<- "   matrix <- fixed"
c13<- "}"
\"
c1<-"if (!is.null(originalMatrix)) { "
c2<- "   terms <- colnames(originalMatrix[, which(!colnames(originalMatrix) %in%   "
c3<-  "      colnames(matrix))])  "
c4<-  "  weight <- 0  "
c5<-  "  if (attr(weighting, \"acronym\") == \"tf-idf\")   "
c6<-  "      weight <- 1e-09  "
c7<-  "  amat <- matrix(weight, nrow = nrow(matrix), ncol = length(terms))  "
c8<-  "  colnames(amat) <- terms "
c9<- "   rownames(amat) <- rownames(matrix) "
c10<- "   fixed <- as.DocumentTermMatrix(cbind(matrix[, which(colnames(matrix) %in%  "
c11<- "       colnames(originalMatrix))], amat), weighting = weighting) "
c12<- "   matrix <- fixed"
c13<- "}"
c5
print("heyy")
print("'heyy'")
print("heyy'lol'")
print("heyy"lol"")
print("heyy\"lol\"")
"hello"
"hello \" "
a<-quote(if (!is.null(originalMatrix)) { terms <- colnames(originalMatrix[, which(!colnames(originalMatrix) %in% colnames(matrix))]); weight <- 0;  if (attr(weighting, 'acronym') == 'tf-idf') {weight <- 1e-09;}  amat <- matrix(weight, nrow = nrow(matrix), ncol = length(terms)); colnames(amat) <- terms; rownames(amat) <- rownames(matrix);fixed <- as.DocumentTermMatrix(cbind(matrix[, which(colnames(matrix) %in% colnames(originalMatrix))], amat), weighting = weighting);    matrix <- fixed;})
trace (create_matrix, quote(if (!is.null(originalMatrix)) { terms <- colnames(originalMatrix[, which(!colnames(originalMatrix) %in% colnames(matrix))]); weight <- 0;  if (attr(weighting, 'acronym') == 'tf-idf') {weight <- 1e-09;}  amat <- matrix(weight, nrow = nrow(matrix), ncol = length(terms)); colnames(amat) <- terms; rownames(amat) <- rownames(matrix);fixed <- as.DocumentTermMatrix(cbind(matrix[, which(colnames(matrix) %in% colnames(originalMatrix))], amat), weighting = weighting);    matrix <- fixed;}), at=12);
c5
c1<-"if (!is.null(originalMatrix)) { "
c2<- "   terms <- colnames(originalMatrix[, which(!colnames(originalMatrix) %in%   "
c3<-  "      colnames(matrix))])  "
c4<-  "  weight <- 0  "
c5<-  paste("  if (attr(weighting, 'acronym') == 'tf-idf')   "
c6<-  "      weight <- 1e-09  "
c7<-  "  amat <- matrix(weight, nrow = nrow(matrix), ncol = length(terms))  "
c8<-  "  colnames(amat) <- terms "
c9<- "   rownames(amat) <- rownames(matrix) "
c10<- "   fixed <- as.DocumentTermMatrix(cbind(matrix[, which(colnames(matrix) %in%  "
c11<- "       colnames(originalMatrix))], amat), weighting = weighting) "
c12<- "   matrix <- fixed"
c13<- "}"
paste(c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,collapse="\n")
trace (create_matrix, quote(paste(c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,collapse="\n")), at=12)
c1<-"if (!is.null(originalMatrix)) { "
c2<- "   terms <- colnames(originalMatrix[, which(!colnames(originalMatrix) %in%   "
c3<-  "      colnames(matrix))])  "
c4<-  "  weight <- 0  "
c5<-  paste("  if (attr(weighting, 'aacronym') == 'tf-idf')   "
c6<-  "      weight <- 1e-09  "
c7<-  "  amat <- matrix(weight, nrow = nrow(matrix), ncol = length(terms))  "
c8<-  "  colnames(amat) <- terms "
c9<- "   rownames(amat) <- rownames(matrix) "
c10<- "   fixed <- as.DocumentTermMatrix(cbind(matrix[, which(colnames(matrix) %in%  "
c11<- "       colnames(originalMatrix))], amat), weighting = weighting) "
c12<- "   matrix <- fixed"
c13<- "}"
trace (create_matrix, quote(paste(c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,collapse="\n")), at=12)
trace("create_matrix",edit=T)
as.list(body(create_matrix))
c1<-"if (!is.null(originalMatrix)) { "
c2<- "   terms <- colnames(originalMatrix[, which(!colnames(originalMatrix) %in%   "
c3<-  "      colnames(matrix))])  "
c4<-  "  weight <- 0  "
c5<-  "  if (attr(weighting, 'aacronym') == 'tf-idf')   "
c6<-  "      weight <- 1e-09  "
c7<-  "  amat <- matrix(weight, nrow = nrow(matrix), ncol = length(terms))  "
c8<-  "  colnames(amat) <- terms "
c9<- "   rownames(amat) <- rownames(matrix) "
c10<- "   fixed <- as.DocumentTermMatrix(cbind(matrix[, which(colnames(matrix) %in%  "
c11<- "       colnames(originalMatrix))], amat), weighting = weighting) "
c12<- "   matrix <- fixed"
c13<- "}"
trace (create_matrix, quote(paste(c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,collapse="\n")), at=12)
trace("create_matrix",edit=T)
shiny::runApp()
w
W
predMatrix <- create_matrix(predictionData, originalMatrix=dtMatrix)
trace("create_matrix",edit=T)
trace (create_matrix, paste(c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,collapse="\n"), at=12)
c1<-"if (!is.null(originalMatrix)) { "
c2<- "   terms <- colnames(originalMatrix[, which(!colnames(originalMatrix) %in%   "
c3<-  "      colnames(matrix))])  "
c4<-  "  weight <- 0  "
c5<-  "  if (attr(weighting, 'aacronym') == 'tf-idf')   "
c6<-  "      weight <- 1e-09  "
c7<-  "  amat <- matrix(weight, nrow = nrow(matrix), ncol = length(terms))  "
c8<-  "  colnames(amat) <- terms "
c9<- "   rownames(amat) <- rownames(matrix) "
c10<- "   fixed <- as.DocumentTermMatrix(cbind(matrix[, which(colnames(matrix) %in%  "
c11<- "       colnames(originalMatrix))], amat), weighting = weighting) "
c12<- "   matrix <- fixed"
c13<- "}"
trace (create_matrix, paste(c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,collapse="\n"), at=12)
predMatrix <- create_matrix(predictionData, originalMatrix=dtMatrix)
c1<-"if (!is.null(originalMatrix)) { "
c2<- "   terms <- colnames(originalMatrix[, which(!colnames(originalMatrix) %in%   "
c3<-  "      colnames(matrix))])  "
c4<-  "  weight <- 0  "
c5<-  "  if (attr(weighting, 'acronym') == 'tf-idf')   "
c6<-  "      weight <- 1e-09  "
c7<-  "  amat <- matrix(weight, nrow = nrow(matrix), ncol = length(terms))  "
c8<-  "  colnames(amat) <- terms "
c9<- "   rownames(amat) <- rownames(matrix) "
c10<- "   fixed <- as.DocumentTermMatrix(cbind(matrix[, which(colnames(matrix) %in%  "
c11<- "       colnames(originalMatrix))], amat), weighting = weighting) "
c12<- "   matrix <- fixed"
c13<- "}"
trace (create_matrix, paste(c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,collapse="\n"), at=12)
predMatrix <- create_matrix(predictionData, originalMatrix=dtMatrix)
c1<-"if (!is.null(originalMatrix)) { "
c2<- "   terms <- colnames(originalMatrix[, which(!colnames(originalMatrix) %in%   "
c3<-  "      colnames(matrix))])  "
c4<-  "  weight <- 0  "
c5<-  "  if (attr(weighting, 'acronym') == 'tf-idf')   "
c6<-  "      weight <- 1e-09  "
c7<-  "  amat <- matrix(weight, nrow = nrow(matrix), ncol = length(terms))  "
c8<-  "  colnames(amat) <- terms "
c9<- "   rownames(amat) <- rownames(matrix) "
c10<- "   fixed <- as.DocumentTermMatrix(cbind(matrix[, which(colnames(matrix) %in%  "
c11<- "       colnames(originalMatrix))], amat), weighting = weighting) "
c12<- "   matrix <- fixed"
c13<- "}"
trace (create_matrix, paste(c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,collapse="\n"), at=12)
predMatrix <- create_matrix(predictionData, originalMatrix=dtMatrix)
trace (create_matrix, edit = T)
trace (create_matrix, edit = T)
c1<-"if (!is.null(originalMatrix)) { "
c2<- "   terms <- colnames(originalMatrix[, which(!colnames(originalMatrix) %in%   "
c3<-  "      colnames(matrix))])  "
c4<-  "  weight <- 0  "
c5<-  "  if (attr(weighting, 'acronym') == 'tf-idf')   "
c6<-  "      weight <- 1e-09  "
c7<-  "  amat <- matrix(weight, nrow = nrow(matrix), ncol = length(terms))  "
c8<-  "  colnames(amat) <- terms "
c9<- "   rownames(amat) <- rownames(matrix) "
c10<- "   fixed <- as.DocumentTermMatrix(cbind(matrix[, which(colnames(matrix) %in%  "
c11<- "       colnames(originalMatrix))], amat), weighting = weighting) "
c12<- "   matrix <- fixed"
c13<- "}"
trace (create_matrix, paste(c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,collapse="\n"), at=12)
trace (create_matrix, edit = T)
quote(c1,c2)
quote(c1)
quote(c2)
trace (create_matrix, quote(c1), at=12)
trace (create_matrix, edit = T)
trace (create_matrix, paste(c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,collapse="\n"), at=12)
trace (create_matrix, edit = T)
c1<-"if (!is.null(originalMatrix)) { "
c2<- "   terms <- colnames(originalMatrix[, which(!colnames(originalMatrix) %in%   "
c3<-  "      colnames(matrix))])  "
c4<-  "  weight <- 0  "
c5<-  "  if (attr(weighting, 'acronym') == 'tf-idf')   "
c6<-  "      weight <- 1e-09  "
c7<-  "  amat <- matrix(weight, nrow = nrow(matrix), ncol = length(terms))  "
c8<-  "  colnames(amat) <- terms "
c9<- "   rownames(amat) <- rownames(matrix) "
c10<- "   fixed <- as.DocumentTermMatrix(cbind(matrix[, which(colnames(matrix) %in%  "
c11<- "       colnames(originalMatrix))], amat), weighting = weighting) "
c12<- "   matrix <- fixed"
c13<- "}"
trace (create_matrix, paste(c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,collapse="\n"), at=12)
trace (create_matrix, edit = T)
fix(create_matrix)
fix(create_matrix)
body(create_matrix)
{
stem_words <- function(x) {
split <- strsplit(x, " ")
return(wordStem(unlist(split), language = language))
}
tokenize_ngrams <- function(x, n = ngramLength) return(rownames(as.data.frame(unclass(textcnt(x,
method = "string", n = n)))))
control <- list(bounds = list(local = c(minDocFreq, maxDocFreq)),
language = language, tolower = toLower, removeNumbers = removeNumbers,
removePunctuation = removePunctuation, stopwords = removeStopwords,
stripWhitespace = stripWhitespace, wordLengths = c(minWordLength,
maxWordLength), weighting = weighting)
if (ngramLength > 1) {
control <- append(control, list(tokenize = tokenize_ngrams),
after = 7)
}
else {
control <- append(control, list(tokenize = scan_tokenizer),
after = 4)
}
if (stemWords == TRUE && ngramLength == 1)
control <- append(control, list(stemming = stem_words),
after = 7)
trainingColumn <- apply(as.matrix(textColumns), 1, paste,
collapse = " ")
trainingColumn <- sapply(as.vector(trainingColumn, mode = "character"),
iconv, to = "UTF8", sub = "byte")
corpus <- Corpus(VectorSource(trainingColumn), readerControl = list(language = language))
matrix <- DocumentTermMatrix(corpus, control = control)
if (removeSparseTerms > 0)
matrix <- removeSparseTerms(matrix, removeSparseTerms)
{
if (!is.null(originalMatrix)) {
terms <- colnames(originalMatrix[, which(!colnames(originalMatrix) %in%
colnames(matrix))])
weight <- 0
if (attr(weighting, "acronym") == "tf-idf")
weight <- 1e-09
amat <- matrix(weight, nrow = nrow(matrix), ncol = length(terms))
colnames(amat) <- terms
rownames(amat) <- rownames(matrix)
fixed <- as.DocumentTermMatrix(cbind(matrix[, which(colnames(matrix) %in%
colnames(originalMatrix))], amat), weighting = weighting)
matrix <- fixed
}
}
matrix <- matrix[, sort(colnames(matrix))]
gc()
return(matrix)
}
trace (create_matrix, edit = T)
body(create_matrix)
{
stem_words <- function(x) {
split <- strsplit(x, " ")
return(wordStem(unlist(split), language = language))
}
tokenize_ngrams <- function(x, n = ngramLength) return(rownames(as.data.frame(unclass(textcnt(x,
method = "string", n = n)))))
control <- list(bounds = list(local = c(minDocFreq, maxDocFreq)),
language = language, tolower = toLower, removeNumbers = removeNumbers,
removePunctuation = removePunctuation, stopwords = removeStopwords,
stripWhitespace = stripWhitespace, wordLengths = c(minWordLength,
maxWordLength), weighting = weighting)
if (ngramLength > 1) {
control <- append(control, list(tokenize = tokenize_ngrams),
after = 7)
}
else {
control <- append(control, list(tokenize = scan_tokenizer),
after = 4)
}
if (stemWords == TRUE && ngramLength == 1)
control <- append(control, list(stemming = stem_words),
after = 7)
trainingColumn <- apply(as.matrix(textColumns), 1, paste,
collapse = " ")
trainingColumn <- sapply(as.vector(trainingColumn, mode = "character"),
iconv, to = "UTF8", sub = "byte")
corpus <- Corpus(VectorSource(trainingColumn), readerControl = list(language = language))
matrix <- DocumentTermMatrix(corpus, control = control)
if (removeSparseTerms > 0)
matrix <- removeSparseTerms(matrix, removeSparseTerms)
{
if (!is.null(originalMatrix)) {
terms <- colnames(originalMatrix[, which(!colnames(originalMatrix) %in%
colnames(matrix))])
weight <- 0
if (attr(weighting, "acronym") == "tf-idf")
weight <- 1e-09
amat <- matrix(weight, nrow = nrow(matrix), ncol = length(terms))
colnames(amat) <- terms
rownames(amat) <- rownames(matrix)
fixed <- as.DocumentTermMatrix(cbind(matrix[, which(colnames(matrix) %in%
colnames(originalMatrix))], amat), weighting = weighting)
matrix <- fixed
}
}
matrix <- matrix[, sort(colnames(matrix))]
gc()
return(matrix)
}
trace (create_matrix, edit = T)
body(create_matrix)[[12]]
trace (create_matrix, edit = T)
trace (create_matrix, edit = T)
body(create_matrix)[[12]]
body(create_matrix)[[12]][5]
body(create_matrix)[[12]]
body(create_matrix)[[12]][1]
body(create_matrix)[[12]][2]
body(create_matrix)[[12]][3]
body(create_matrix)[[12]][3]
body(create_matrix)[[12]]
body(create_matrix)[[12]]
body(create_matrix)[[12]][1]
body(create_matrix)[[12]][2]
body(create_matrix)[[12]][3]
body(create_matrix)[[12]][3][1]
body(create_matrix)[[12]][3][2]
body(create_matrix)[[12]][[3]]
body(create_matrix)[[12]][[3]][1]
body(create_matrix)[[12]][[3]][2]
body(create_matrix)[[12]][[3]][3]
body(create_matrix)[[12]][[3]][4]
body(create_matrix)[[12]][[3]][4]<-substitute((if (attr(weighting, "Acronym") == "tf-idf") weight <- 1e-09)()
)
trace (create_matrix, edit = T)
body(create_matrix)[[12]][[3]][4]<-substitute((if (attr(weighting, "acronym") == "tf-idf") weight <- 1e-09)()
)
trace (create_matrix, edit = T)
trace (create_matrix, edit = T)
trace (create_matrix, edit = T)
shiny::runApp()
MultiDomain  = function(X,y,d,p,alpha,beta,S,lambda1,lambda2, type)
{
D = ncol(X);
M = length(unique(d));
w = matrix(data = 0,nrow = D,ncol = 1)
W = matrix(data = 0,nrow = D,ncol = M)
# X <- Matrix(X, sparse = TRUE)
#y <- Matrix(y, sparse = TRUE)
# d <- Matrix(d, sparse = TRUE)
#  p <- Matrix(p, sparse = TRUE)
#  S <- Matrix(S, sparse = TRUE)
#  W <- Matrix(W, sparse = TRUE)
#  w <- Matrix(w, sparse = TRUE)
w_2 = w;
w_1 = w;
W_2 = W;
W_1 = W;
f = computeLoss(X, y, d, p, alpha, beta, S, lambda1, lambda2, w, W, type,M)+lambda2*(sum(abs(w))+sum(sum(abs(W))));
loss=f;
k = 0;
gamma = 1;
while  (k<1000 && gamma>10^(-40))
{
print(k)
k=k+1;
a = k/(k+3);
y_w = (1+a)*w_1 - a*w_2;
#print(y_w)
y_W = (1+a)*W_1 - a*W_2;
output=computeGradient(X, y, d, p, alpha, beta, S, lambda1, lambda2, y_w, y_W, type,M);
g_w=output[[1]]
g_W=output[[2]]
w = y_w - gamma*g_w;
W = y_W - gamma*g_W;
w[abs(w)<=lambda2*gamma]=0;
W[abs(W)<=lambda2*gamma]=0;
y1 = sign(w);
y2 = abs(w)-lambda2*gamma;
w = y1*y2;
y1 = sign(W);
y2 = abs(W)-lambda2*gamma;
W = y1*y2;
##I was here
f = computeLoss(X,y,d,p,alpha,beta,S,lambda1,lambda2,w,W, type,M);
f_y = computeLoss(X,y,d,p,alpha,beta,S,lambda1,lambda2,y_w,y_W, type,M);
f_lip = f_y + t(g_w)%*%(w-y_w) + 1/2/gamma*norm_vec((w-y_w))^2;
for (m in 1:M)
{
f_lip = f_lip+t(g_W[,m])%*%(W[,m]-y_W[,m])+1/2/gamma*norm_vec((W[,m]-y_W[,m]))^2;
#####
}
iter = 0;
while ((f>f_lip)[1] && gamma>10^(-40))
{
iter = iter+1;
gamma = gamma/2;
w = y_w - gamma*g_w;
W = y_W - gamma*g_W;
w[abs(w)<=lambda2*gamma]=0;
W[abs(W)<=lambda2*gamma]=0;
y1 = sign(w);
y2 = abs(w)-lambda2*gamma;
w = y1*y2;
y1 = sign(W);
y2 = abs(W)-lambda2*gamma;
W = y1*y2;
f = computeLoss(X,y,d,p,alpha,beta,S,lambda1,lambda2,w,W, type,M);
f_lip = f_y + t(g_w)%*%(w-y_w) + 1/2/gamma*norm_vec((w-y_w))^2;
for (m in 1:M){
f_lip = f_lip+t(g_W[,m])%*%(W[,m]-y_W[,m])+1/2/gamma*norm_vec((W[,m]-y_W[,m]))^2;
}
}
loss = cbind(loss, f+lambda2*(sum(abs(w))+sum(sum(abs(W)))));
loss[ncol(loss)];
w_2 = w_1;
w_1 = w;
W_2 = W_1;
W_1 = W;
if (k>1 && abs(loss[ncol(loss)]-loss[ncol(loss)-1])/abs(loss[ncol(loss)])<0.001)# || (loss(end)<0))
{
print(loss[ncol(loss)]);
break;
}
}
return(list(w,W))
}
#figure;
#plot(loss);
##################
computeGradient =function(X,y,d,p,alpha,beta,S,lambda1,lambda2,w,W, type,M){
N = nrow(X);
D = ncol(X);
#M = length(unique(d));
g_w = matrix(data = 0,nrow = nrow((w)),ncol = ncol(w))
g_W = matrix(data = 0,nrow = nrow(W),ncol = ncol(W))
g_w <- Matrix(g_w, sparse = TRUE)
g_W <- Matrix(g_W, sparse = TRUE)
if (type=="ls"){
for (m in 1:M){
temp = (2*t(X[as.vector(d==m),]))%*% ((X[as.vector(d==m),]%*%(w+W[,m])-y[d==m]));
g_w = g_w + temp;
g_W[,m] = g_W[,m] + temp;
}
}
if(type=="log")
{
for( m in 1:M){
temp =t(y[d==m]/(1+exp(y[d==m]*(X[d==m,]%*%(w+W[,m])))))%*%X[d==m,];
g_w = g_w - t(temp);
g_W[,m] = g_W[,m] - t(temp)
}
}
for (m in 1:M){
#----------------#####################
g_W[,m] = g_W[,m] + 4*beta*(sum(S[m,])*W[,m]-W%*%S[m,]);
}
g_w = g_w - alpha*p+(2*lambda1)*w;
g_W = g_W + (2*lambda1)*W;
return(list(g_w,g_W))
}
##################################
computeLoss<- function(X,y,d,p,alpha,beta,S,lambda1,lambda2,w,W, type,M){
N = nrow(X);
D = ncol(X);
#M = length(unique(d));
f = 0;
if (type=="ls")
{
for (m in 1:M)
f = f+norm_vec((X[as.vector(d==m),]%*%(w+W[,m])-y[d==m]))^2  # sum((X[d==m,]%*%(w+W[,m])-y[d=m])^2);
}
if(type=="log")
{
for (m in 1:M)
f = f+ sum(log(1+exp(-y[d==m]*(X[d==m,]%*%(w+W[,m])))));
}
f = f-alpha*t(p)%*%w;
f = f+lambda1*(sum(w^2)+sum(sum(W^2)));
for (i in 1:M){
for (j in 1:M)
f = f+beta*S[i,j]*sum((W[,i]-W[,j])^2);
}
f
}
norm_vec <- function(x) sqrt(sum(x^2))
shiny::runApp()
w
tail(w)
length(w)
new_w
head(w)
head(new_w)
tweets
head(tweets)
w
length(w)
runApp()
runApp(w)
runApp()
a
check
check=0
incr<-function()
{
check=check+1
print(check)
}
incr(check)
incr()
check
incr<-function()
{
check<-check+1
print(check)
}
check
incr
incr()
check
incr<-function()
{
check<<-check+1
print(check)
}
incr()
check
check
runApp()
tail(w)
